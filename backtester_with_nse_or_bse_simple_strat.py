# -*- coding: utf-8 -*-
"""backtester with NSE or BSE - simple strat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jxq4x05p-vWUlGxmmR_ctH2JYbh8NpYi
"""

from __future__ import (absolute_import, division, print_function, unicode_literals)

import yfinance as yf
import backtrader as bt
# import datetime

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline


rel = yf.download("RELIANCE.NS")

rel.loc["2022":"2023"]

data = bt.feeds.PandasData(dataname=rel.loc["2020":"2023"])


class TestStrategy(bt.Strategy):
    params = (
        ('maperiod', 15),
    )

    def log(self, txt, dt=None):
        """ Logging function fot this strategy"""
        dt = dt or self.datas[0].datetime.date(0)
        print('%s, %s' % (dt.isoformat(), txt))

    def __init__(self):
        # Keep a reference to the "close" line in the data[0] dataseries
        self.dataclose = self.datas[0].close

        # To keep track of pending orders and buy price/commission
        self.order = None
        self.buyprice = None
        self.buycomm = None

        # Add a MovingAverageSimple indicator
        self.sma = bt.indicators.SimpleMovingAverage(
            self.datas[0], period=self.params.maperiod)

    def notify_order(self, order):
        if order.status in [order.Submitted, order.Accepted]:
            # Buy/Sell order submitted/accepted to/by broker - Nothing to do
            return

        # Check if an order has been completed
        # Attention: broker could reject order if not enough cash
        if order.status in [order.Completed]:
            if order.isbuy():
                self.log(
                    'BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %
                    (order.executed.price,
                     order.executed.value,
                     order.executed.comm))

                self.buyprice = order.executed.price
                self.buycomm = order.executed.comm
            else:  # Sell
                self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %
                         (order.executed.price,
                          order.executed.value,
                          order.executed.comm))

            self.bar_executed = len(self)

        elif order.status in [order.Canceled, order.Margin, order.Rejected]:
            self.log('Order Canceled/Margin/Rejected')

        self.order = None

    def notify_trade(self, trade):
        if not trade.isclosed:
            return

        self.log('OPERATION PROFIT, GROSS %.2f, NET %.2f' %
                 (trade.pnl, trade.pnlcomm))

    def next(self):
        # Simply log the closing price of the series from the reference
        self.log('Close, %.2f' % self.dataclose[0])

        # Check if an order is pending ... if yes, we cannot send a 2nd one
        if self.order:
            return

        # Check if we are in the market
        if not self.position:

            # Not yet ... we MIGHT BUY if ...
            if self.dataclose[0] > self.sma[0]:

                # BUY, BUY, BUY!!! (with all possible default parameters)
                self.log('BUY CREATE, %.2f' % self.dataclose[0])

                # Keep track of the created order to avoid a 2nd order
                self.order = self.buy()

        else:

            if self.dataclose[0] < self.sma[0]:
                # SELL, SELL, SELL!!! (with all possible default parameters)
                self.log('SELL CREATE, %.2f' % self.dataclose[0])

                # Keep track of the created order to avoid a 2nd order
                self.order = self.sell()

    def stop(self):
        print(self.stats)


# Create a cerebro entity
cerebro = bt.Cerebro()

# Add a strategy
cerebro.addstrategy(TestStrategy)
cerebro.adddata(data)

# Set our desired cash start
cerebro.broker.setcash(1000000.0)

# Add a FixedSize sizer according to the stake
cerebro.addsizer(bt.sizers.FixedSize, stake=10)
cerebro.addanalyzer(bt.analyzers.DrawDown)
cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years,
                    data=data)
cerebro.addanalyzer(bt.analyzers.AnnualReturn)

# gives a list of every position, prolly not very useful
# cerebro.addanalyzer(bt.analyzers.PositionsValue)

# cerebro.addanalyzer(bt.analyzers.LogReturnsRolling)

cerebro.addanalyzer(bt.analyzers.PeriodStats)
cerebro.addanalyzer(bt.analyzers.Returns)
cerebro.addanalyzer(bt.analyzers.SharpeRatio)
cerebro.addanalyzer(bt.analyzers.SharpeRatio_A)
cerebro.addanalyzer(bt.analyzers.SQN)

# Gives summary of trades %age, win/loss max/avg, long/short max/avg
# very useful for detailed inspection
# cerebro.addanalyzer(bt.analyzers.TradeAnalyzer)

# cerebro.addanalyzer(bt.analyzers.Transactions)

cerebro.addanalyzer(bt.analyzers.VWR)
# cerebro.addanalyzer(bt.analyzers.SharpeRatio, _name='mysharpe')


# Set the commission
cerebro.broker.setcommission(commission=0.001)

# Print out the starting conditions
print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())

# Run over everything
result = cerebro.run()
strat = result[0]

# Print out the final result
print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())

cerebro.plot()

for item in strat.stats:
    print(item)

for analyzer in strat.analyzers:
    analysis = analyzer.get_analysis()
    for k, v in analysis.items():
        print(f"Analyzer {analyzer} has result {k} with value {v}")

strat.analyzers[8].get_analysis()

strat.stats[1].lines

strat.analyzers[0].get_analysis()
